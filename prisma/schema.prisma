// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "darwin"]
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_URL")
    relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
    id                String   @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    createdAt         DateTime @default(now())
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id               String         @id @default(cuid())
    name             String         @unique
    password         String?
    email            String?        @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    role             Role           @default(USER)
    books            Book[]
    swapsAsRequester SwapRequest[]  @relation("RequesterUser")
    swapsAsHolder    SwapRequest[]  @relation("HolderUser")
    myReviews        UserReview[]   @relation("ToUser")
    reviewsPosted    UserReview[]   @relation("FromUser")
    notifications    Notification[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Book {
    id                      String        @id @default(cuid())
    title                   String
    author                  String
    status                  BookStatus    @default(PUBLISHED)
    description             String?
    genre                   Genre         @relation(fields: [genreId], references: [id])
    genreId                 String
    user                    User          @relation(fields: [userId], references: [id])
    userId                  String
    swapRequestsAsHolder    SwapRequest[] @relation("RequesterBook")
    swapRequestsAsRequester SwapRequest[] @relation("HolderBook")
    images                  BookImage[]

    @@index([genreId])
    @@index([userId])
}

model Notification {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    content   String
    seen      Boolean  @default(false)

    @@index([userId])
}

model BookImage {
    id     String @id @default(cuid())
    src    String
    book   Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)
    bookId String

    @@index([bookId])
}

model SwapRequest {
    id              String     @id @default(cuid())
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt
    status          SwapStatus @default(PENDING_HOLDER)
    requester       User       @relation("RequesterUser", fields: [requesterId], references: [id])
    requesterId     String
    holder          User       @relation("HolderUser", fields: [holderId], references: [id])
    holderId        String
    holderBook      Book       @relation("HolderBook", fields: [holderBookId], references: [id])
    holderBookId    String
    requesterBook   Book?      @relation("RequesterBook", fields: [requesterBookId], references: [id])
    requesterBookId String?

    @@index([requesterId])
    @@index([holderId])
    @@index([requesterBookId])
    @@index([holderBookId])
}

model Genre {
    id    String @id @default(cuid())
    name  String
    books Book[]
}

model UserReview {
    id         String  @id @default(cuid())
    fromUser   User    @relation("FromUser", fields: [fromUserId], references: [id])
    fromUserId String
    toUserId   String
    toUser     User    @relation("ToUser", fields: [toUserId], references: [id])
    rating     Float
    comment    String?

    @@index([fromUserId])
    @@index([toUserId])
}

enum Role {
    USER
    ADMIN
}

enum SwapStatus {
    PENDING_HOLDER
    PENDING_REQUESTER
    ACCEPTED
    CANCELLED
    REJECTED
    BOOK_NOT_AVAILABLE
}

enum BookStatus {
    PUBLISHED
    NOT_PUBLISHED
    SWAPPED
    DELETED
}
